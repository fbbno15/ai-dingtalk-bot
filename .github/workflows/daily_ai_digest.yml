name: Daily AI Digest Merge

on:
  schedule:
    - cron: '30 11 * * *'  # 每天UTC 11:30，即北京时间19:30
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch-and-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set today and filename
        id: set-today
        run: |
          echo "today=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "filename=AI资讯日报_$(date +%Y-%m-%d).md" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install playwright
          playwright install chromium

      - name: Run xiaohu
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        run: python fetch_xiaohu_tab2.py

      - name: Run bestreader
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        run: python fetch_hub_bestreader.py

      - name: Run aibase
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        run: python fetch_aibase_daily.py

      - name: Merge all sources
        run: python merge_all_sources.py

      - name: Create daily digest markdown
        env:
          FILENAME: ${{ steps.set-today.outputs.filename }}
        run: |
          mkdir -p daily_digest
          cp all_sources_raw.md "daily_digest/${FILENAME}"

      - name: Upload to GitHub Release (daily)
        uses: ncipollo/release-action@v1
        with:
          tag: daily
          name: 每日AI资讯
          body: "每日自动更新AI资讯原文Markdown文件"
          artifacts: daily_digest/${{ steps.set-today.outputs.filename }}
          allowUpdates: true
          replacesArtifacts: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send to DingTalk
        env:
          DINGTALK_TOKEN: ${{ secrets.DINGTALK_TOKEN }}
          DINGTALK_SECRET: ${{ secrets.DINGTALK_SECRET }}
          FILENAME: ${{ steps.set-today.outputs.filename }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python - <<EOF
          import requests
          import json
          import time
          import hmac
          import base64
          import hashlib
          import os
          from datetime import datetime

          def get_dingtalk_sign():
              timestamp = str(round(time.time() * 1000))
              secret = os.environ['DINGTALK_SECRET']
              secret_enc = secret.encode('utf-8')
              string_to_sign = '{}\n{}'.format(timestamp, secret)
              string_to_sign_enc = string_to_sign.encode('utf-8')
              hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()
              sign = base64.b64encode(hmac_code).decode('utf-8')
              return timestamp, sign

          def send_dingtalk_message(text):
              timestamp, sign = get_dingtalk_sign()
              webhook = f"https://oapi.dingtalk.com/robot/send?access_token={os.environ['DINGTALK_TOKEN']}&timestamp={timestamp}&sign={sign}"

              headers = {'Content-Type': 'application/json'}

              today = datetime.now().strftime('%Y-%m-%d')
              data = {
                  "msgtype": "markdown",
                  "markdown": {
                      "title": f"AI资讯日报 {today}",
                      "text": text
                  }
              }

              response = requests.post(webhook, headers=headers, data=json.dumps(data))
              return response.json()

          # 生成下载链接
          filename = os.environ['FILENAME']
          repo = os.environ['GITHUB_REPOSITORY']
          today = datetime.now().strftime('%Y-%m-%d')
          download_url = f"https://github.com/{repo}/releases/download/daily/{filename}"

          # 只发送日期和下载链接
          text = f"**AI资讯日报 {today}**\n\n[点击下载今日原文Markdown]({download_url})"

          # 发送到钉钉
          result = send_dingtalk_message(text)
          print("钉钉发送结果:", result)
          if result.get('errcode') != 0:
              exit(1)
          EOF

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add daily_digest/
          git add all_sources_raw.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update daily AI digest" && git push)
